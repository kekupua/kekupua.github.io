(this["webpackJsonpnew-layout"]=this["webpackJsonpnew-layout"]||[]).push([[0],{24:function(e,t,a){e.exports=a(61)},29:function(e,t,a){},54:function(e,t,a){},61:function(e,t,a){"use strict";a.r(t);var n=a(0),o=a.n(n),i=a(18),r=a.n(i),s=(a(29),a(30),a(54),a(14)),c=a(10),l={colors:{lightGrey:"grey",grey:"grey",darkGrey:"grey"},sizes:{_001:"1px",_025:"2px",_050:"4px",_075:"6px",_100:"".concat(8,"px"),_200:"".concat(16,"px"),_300:"".concat(24,"px"),_400:"".concat(32,"px"),_500:"".concat(40,"px"),_600:"".concat(48,"px"),_700:"".concat(56,"px"),_800:"".concat(64,"px"),_900:"".concat(72,"px"),getScaledSize:function(e){return"".concat(8*e,"px")}}},h=Object(s.a)(c.b)({textDecoration:"none",padding:l.sizes._300}),m=s.a.div({display:"flex",width:"100%",height:l.sizes._900,position:"fixed",background:"#000000e8",transition:"opacity 0.15s"}),u=function(){var e=o.a.useRef(null),t=function(t){window.pageYOffset>10&&"0"===e.current.style.opacity?(e.current.style.display="flex",e.current.style.opacity=1):0===window.pageYOffset&&"0"!==e.current.style.opacity&&(e.current.style.opacity=0,e.current.style.display="none")};return Object(n.useEffect)((function(){return document.addEventListener("scroll",t),function(){document.removeEventListener("scroll",t)}})),o.a.createElement(m,{ref:e},o.a.createElement(h,{exact:!0,to:"/"},"Home"),o.a.createElement(h,{to:"/projects"},"Projects"),o.a.createElement(h,{to:"/essays"},"Essays"))},g=[{layout:"project-1",images:["images/tamagotchi_2.PNG"],title:"Tamagotchi",date:"2017-05-01",tags:["Tamagotchi","OOP","C++"],summary:"My team developed a tamagotchi game for our Final Project in EE 205.",content:function(){return o.a.createElement(o.a.Fragment,null,o.a.createElement("div",null,o.a.createElement("img",{src:"images/tamagotchi_1.PNG",alt:"tamagotchi 1"}),o.a.createElement("img",{src:"images/tamagotchi_2.PNG",alt:"tamagotchi 2"}),o.a.createElement("img",{src:"images/tamagotchi_3.PNG",alt:"tamagotchi 3"})),"This project was a Final Project for our course in Object Oriented Programming, EE 205. This game follows the player as they try to care for a digital pet known as a tamagotchi. The tamagotchi has stats that the player must maintain in order for the tamagotchi to evolve into new stages and therefore progress through its life cycle. We began with the idea of displaying the tamagotchi as a series of sprites that would change as the tamagotchi evolved. We began by implementing the tamagotchi as a series of sprites so we could show an \u201canimation\u201d by quickly changing between two sprites and clearing the screen. This required us to use a wait function and system commands to manipulate the display. After working on the display, we turned to implementing the driver and tamagotchi class. The driver would simply consist of menus of choices that would then call functions of the tamagotchi class. The driver currently has 6 input options: Feed Tamagotchi, Play a Game, Go to the Shop, Check Inventory, Check Status, and Next Day. The descriptions of each of the menu options can be found in the instructions above. All of these commands are run within a while loop that checks the state of the tamagotchi on each iteration.  If the tamagotchi is found to be dead, the game will prompt the user and exit. If the tamagotchi is found to be ready to evolve, an animation will play and the user will be notified that the tamagotchi has evolved. An evolution causes the sprite displayed to change to the next evolution. The evolutions are as follows, egg, rabbit, potato. In order to give the players a side objective, we create a couple minigames to earn cash. For the games, we split them into two different files. Both games utilize text files as instructions to print when the user selects a game. This is done by creating a filestream using ifstream and then piping the contents of the text file to the std I/O stream. For the memory game, the given string is first generated by the rand() function. The rand() function returns integers between 60 and 95 which we then, by ASCII conversion, convert into a string. The user then enters a string that we compare to the original string. For the guessing game, we use rand() to generate a random number between 1 and 100 and then ask for the user\u2019s guess. We then loop until the user is out of guesses or the user guesses the correct number. My role in this project was as the main programmer for the graphics and game logic. I practiced object-orient programming methodologies for building the structure for the different tamagotchi stages and items. This project also allowed me to practice my game design knowledge as I theorized how to create incentives for the player to play the game. As I move forward in my career, this project will serve as a reminder of simpler times. You can view the source code on ",o.a.createElement("a",{href:"https://github.com/kekupua/WDK-Homework/tree/master/Final%20Project"},"Github"),".")}}],d=function(){return o.a.createElement("div",null,"Projects",g.map((function(e,t){return o.a.createElement("div",{key:"project-".concat(t)},e.content())})))},p=function(){return o.a.createElement("div",null,"Essays")},f=a(5);var y=function(){return o.a.createElement("div",{className:"App",style:{width:"100%",overflowX:"hidden"}},o.a.createElement(c.a,null,o.a.createElement(u,null),o.a.createElement(f.a,{exact:!0,path:"/"},o.a.createElement("s-home",null)),o.a.createElement(f.a,{path:"/projects"},o.a.createElement(d,null)),o.a.createElement(f.a,{path:"/essays"},o.a.createElement(p,null))))};Boolean("localhost"===window.location.hostname||"[::1]"===window.location.hostname||window.location.hostname.match(/^127(?:\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));r.a.render(o.a.createElement(y,null),document.getElementById("root")),"serviceWorker"in navigator&&navigator.serviceWorker.ready.then((function(e){e.unregister()})).catch((function(e){console.error(e.message)}))}},[[24,1,2]]]);
//# sourceMappingURL=main.4dc25e12.chunk.js.map