{"version":3,"sources":["styleguide/index.js","styleguide/colors.js","styleguide/sizes.js","components/ui/Navigation.jsx","projects/index.js","projects/project-1.js","components/Projects.jsx","components/Essays.jsx","App.jsx","serviceWorker.js","index.js"],"names":["colors","lightGrey","grey","darkGrey","sizes","_001","_025","_050","_075","_100","_200","BASE_VALUE","_300","_400","_500","_600","_700","_800","_900","getScaledSize","scale","StyledNavLink","styled","NavLink","textDecoration","padding","style","NavigationContainer","div","display","width","height","position","background","transition","Navigation","navigationRef","React","useRef","handleScroll","e","window","pageYOffset","current","opacity","useEffect","document","addEventListener","removeEventListener","ref","exact","to","projects","layout","images","title","date","tags","summary","content","Fragment","src","alt","href","Projects","map","project","index","key","Essays","App","className","overflowX","path","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6QAMe,GACXA,OCNS,CACTC,UAAW,OACXC,KAAM,OACNC,SAAU,QDIVC,MEFe,CACfC,KAAM,MACNC,KAAM,MACNC,KAAM,MACNC,KAAM,MACNC,KAAK,GAAD,OAXS,EAWT,MACJC,KAAK,GAAD,OAAKC,GAAL,MACJC,KAAK,GAAD,OAAKD,GAAL,MACJE,KAAK,GAAD,OAAKF,GAAL,MACJG,KAAK,GAAD,OAAKH,GAAL,MACJI,KAAK,GAAD,OAAKJ,GAAL,MACJK,KAAK,GAAD,OAAKL,GAAL,MACJM,KAAK,GAAD,OAAKN,GAAL,MACJO,KAAK,GAAD,OAAKP,GAAL,MACJQ,cAlBuB,SAACC,GACxB,MAAM,GAAN,OAHa,EAGHA,EAAV,SCGAC,EAAgBC,YAAOC,IAAPD,CAAgB,CAChCE,eAAgB,OAChBC,QAASC,EAAMtB,MAAMQ,OAGrBe,EAAsBL,IAAOM,IAAI,CACjCC,QAAS,OACTC,MAAO,OACPC,OAAQL,EAAMtB,MAAMc,KACpBc,SAAU,QACVC,WAAY,YACZC,WAAY,kBA6BDC,EA1BW,WACtB,IAAIC,EAAgBC,IAAMC,OAAO,MAC7BC,EAAe,SAACC,GACZC,OAAOC,YAAc,IAA8C,MAAxCN,EAAcO,QAAQjB,MAAMkB,SACvDR,EAAcO,QAAQjB,MAAMG,QAAU,OACtCO,EAAcO,QAAQjB,MAAMkB,QAAU,GACR,IAAvBH,OAAOC,aAA6D,MAAxCN,EAAcO,QAAQjB,MAAMkB,UAC/DR,EAAcO,QAAQjB,MAAMkB,QAAU,EACtCR,EAAcO,QAAQjB,MAAMG,QAAU,SAS9C,OANAgB,qBAAU,WAEN,OADAC,SAASC,iBAAiB,SAAUR,GAC7B,WACHO,SAASE,oBAAoB,SAAUT,OAI3C,kBAACZ,EAAD,CAAqBsB,IAAKb,GACtB,kBAACf,EAAD,CAAe6B,OAAK,EAACC,GAAG,KAAxB,QACA,kBAAC9B,EAAD,CAAe8B,GAAG,aAAlB,YACA,kBAAC9B,EAAD,CAAe8B,GAAG,WAAlB,YCrCGC,EAFA,CCAA,CACXC,OAAQ,YACRC,OAAQ,CAAC,2BACTC,MAAO,aACPC,KAAM,aACNC,KAAM,CAAC,aAAc,MAAO,OAC5BC,QAAS,uEACTC,QAAS,WACL,OACI,kBAAC,IAAMC,SAAP,KACI,6BACI,yBAAKC,IAAI,0BAA0BC,IAAI,iBACvC,yBAAKD,IAAI,0BAA0BC,IAAI,iBACvC,yBAAKD,IAAI,0BAA0BC,IAAI,kBAJ/C,2zFAeoC,uBAAGC,KAAK,uEAAR,UAfpC,QCOGC,EAfS,WACpB,OACI,wCAEKZ,EAASa,KAAI,SAACC,EAASC,GACpB,OACI,yBAAKC,IAAG,kBAAaD,IAChBD,EAAQP,gBCAlBU,EARO,WAClB,OACI,wC,OCuBOC,MAnBf,WACE,OACE,yBAAKC,UAAU,MAAM7C,MAAO,CAACI,MAAO,OAAQ0C,UAAW,WACrD,kBAAC,IAAD,KACE,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAOtB,OAAK,EAACuB,KAAK,KAChB,kCAEF,kBAAC,IAAD,CAAOA,KAAK,aACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,WACV,kBAAC,EAAD,UCRUC,QACW,cAA7BjC,OAAOkC,SAASC,UAEe,UAA7BnC,OAAOkC,SAASC,UAEhBnC,OAAOkC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASjC,SAASkC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.4dc25e12.chunk.js","sourcesContent":["import colors from './colors';\nimport sizes from './sizes';\n\nexport {colors};\nexport {sizes};\n\nexport default {\n    colors,\n    sizes\n};","\nlet colors = {\n    lightGrey: 'grey', // Replace later with Hex colors\n    grey: 'grey',\n    darkGrey: 'grey'\n}\n\nexport default colors;","let BASE_VALUE = 8;\n\nexport let getScaledSize = (scale) => {\n    return `${scale * BASE_VALUE}px`;\n}\n\nexport let sizes = {\n    _001: '1px',\n    _025: '2px',\n    _050: '4px',\n    _075: '6px',\n    _100: `${BASE_VALUE}px`,\n    _200: `${BASE_VALUE * 2}px`,\n    _300: `${BASE_VALUE * 3}px`,\n    _400: `${BASE_VALUE * 4}px`,\n    _500: `${BASE_VALUE * 5}px`,\n    _600: `${BASE_VALUE * 6}px`,\n    _700: `${BASE_VALUE * 7}px`,\n    _800: `${BASE_VALUE * 8}px`,\n    _900: `${BASE_VALUE * 9}px`,\n    getScaledSize: getScaledSize\n};\n\nexport default sizes;","import React, { useEffect } from 'react';\nimport styled from 'styled-components';\nimport { NavLink } from 'react-router-dom';\n\nimport style from '../../styleguide';\n\nlet StyledNavLink = styled(NavLink)({\n    textDecoration: 'none',\n    padding: style.sizes._300,\n});\n\nlet NavigationContainer = styled.div({\n    display: 'flex',\n    width: '100%',\n    height: style.sizes._900,\n    position: 'fixed',\n    background: '#000000e8',\n    transition: 'opacity 0.15s',\n})\n\nexport const Navigation = () => {\n    let navigationRef = React.useRef(null);\n    let handleScroll = (e) => {\n        if (window.pageYOffset > 10 && navigationRef.current.style.opacity === \"0\") {\n            navigationRef.current.style.display = 'flex';\n            navigationRef.current.style.opacity = 1;\n        } else if (window.pageYOffset === 0 && navigationRef.current.style.opacity !== \"0\") {\n            navigationRef.current.style.opacity = 0;\n            navigationRef.current.style.display = 'none';\n        }\n    }\n    useEffect(() => {\n        document.addEventListener('scroll', handleScroll);\n        return () => {\n            document.removeEventListener('scroll', handleScroll);\n        }\n    });\n    return (\n        <NavigationContainer ref={navigationRef}>\n            <StyledNavLink exact to=\"/\">Home</StyledNavLink>\n            <StyledNavLink to=\"/projects\">Projects</StyledNavLink>\n            <StyledNavLink to=\"/essays\">Essays</StyledNavLink>\n        </NavigationContainer>\n    )\n}\n\nexport default Navigation;","import project1 from './project-1'; // Import new projects here\n\nlet projects = [project1]; // Add new projects to the list\n\nexport default projects;","import React from 'react';\n\nexport default {\n    layout: 'project-1',\n    images: ['images/tamagotchi_2.PNG'],\n    title: 'Tamagotchi',\n    date: '2017-05-01',\n    tags: ['Tamagotchi', 'OOP', 'C++'],\n    summary: 'My team developed a tamagotchi game for our Final Project in EE 205.',\n    content: () => {\n        return (\n            <React.Fragment>\n                <div>\n                    <img src=\"images/tamagotchi_1.PNG\" alt=\"tamagotchi 1\"/>\n                    <img src=\"images/tamagotchi_2.PNG\" alt=\"tamagotchi 2\"/>\n                    <img src=\"images/tamagotchi_3.PNG\" alt=\"tamagotchi 3\"/>\n                </div>\n                This project was a Final Project for our course in Object Oriented Programming, EE 205. This game follows the player as they try to care for a digital pet known as a tamagotchi. The tamagotchi has stats that the player must maintain in order for the tamagotchi to evolve into new stages and therefore progress through its life cycle.\n\n                We began with the idea of displaying the tamagotchi as a series of sprites that would change as the tamagotchi evolved. We began by implementing the tamagotchi as a series of sprites so we could show an “animation” by quickly changing between two sprites and clearing the screen. This required us to use a wait function and system commands to manipulate the display.\n                After working on the display, we turned to implementing the driver and tamagotchi class. The driver would simply consist of menus of choices that would then call functions of the tamagotchi class. The driver currently has 6 input options: Feed Tamagotchi, Play a Game, Go to the Shop, Check Inventory, Check Status, and Next Day. The descriptions of each of the menu options can be found in the instructions above. All of these commands are run within a while loop that checks the state of the tamagotchi on each iteration.  If the tamagotchi is found to be dead, the game will prompt the user and exit. If the tamagotchi is found to be ready to evolve, an animation will play and the user will be notified that the tamagotchi has evolved. An evolution causes the sprite displayed to change to the next evolution. The evolutions are as follows, egg, rabbit, potato.\n\n                In order to give the players a side objective, we create a couple minigames to earn cash. For the games, we split them into two different files. Both games utilize text files as instructions to print when the user selects a game. This is done by creating a filestream using ifstream and then piping the contents of the text file to the std I/O stream. For the memory game, the given string is first generated by the rand() function. The rand() function returns integers between 60 and 95 which we then, by ASCII conversion, convert into a string. The user then enters a string that we compare to the original string. For the guessing game, we use rand() to generate a random number between 1 and 100 and then ask for the user’s guess. We then loop until the user is out of guesses or the user guesses the correct number.\n\n                My role in this project was as the main programmer for the graphics and game logic. I practiced object-orient programming methodologies for building the structure for the different tamagotchi stages and items. This project also allowed me to practice my game design knowledge as I theorized how to create incentives for the player to play the game. As I move forward in my career, this project will serve as a reminder of simpler times.\n\n                You can view the source code on <a href=\"https://github.com/kekupua/WDK-Homework/tree/master/Final%20Project\">Github</a>.\n            </React.Fragment>\n        )\n    }\n}","import React from 'react';\nimport projects from '../projects';\n\nexport const Projects = () => {\n    return (\n        <div>\n            Projects\n            {projects.map((project, index) => {\n                return (\n                    <div key={`project-${index}`}>\n                        {project.content()}\n                    </div>\n                )\n            })}\n        </div>\n    )\n}\n\nexport default Projects;","import React from 'react';\n\nexport const Essays = () => {\n    return (\n        <div>\n            Essays\n        </div>\n    )\n}\n\nexport default Essays;","import React from 'react';\nimport \"@kekupua/web-components/assets/index\";\nimport './App.css';\nimport Navigation from './components/ui/Navigation';\nimport Projects from './components/Projects';\nimport Essays from './components/Essays'; \nimport { Route, BrowserRouter as Router } from 'react-router-dom';\n\nfunction App() {\n  return (\n    <div className=\"App\" style={{width: '100%', overflowX: 'hidden'}}>\n      <Router>\n        <Navigation/>\n        <Route exact path=\"/\" >\n          <s-home></s-home>\n        </Route>\n        <Route path=\"/projects\" >\n          <Projects/>\n        </Route>\n        <Route path=\"/essays\" >\n          <Essays/>\n        </Route>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}